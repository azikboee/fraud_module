import pandas as pd
import sys
import os
import subprocess
import time
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from config import setup_directories, get_data_path, PATHS

class BankAISystem:
    def __init__(self):
        self.version = "2.0"
        self.results = {}
        setup_directories()
    
    def clear_screen(self):
        """–û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def show_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
        self.clear_screen()
        print(f"""
üè¶ –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ë–ê–ù–ö–ê v{self.version}
==================================================
         –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: /src | /Reports
==================================================

1Ô∏è   –ü–û–õ–ù–´–ô –¶–ò–ö–õ (–¥–∞–Ω–Ω—ã–µ ‚Üí AI ‚Üí –æ—Ç—á–µ—Ç—ã)
2Ô∏è   –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó (—Ç–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è)  
3Ô∏è   –ü–†–û–î–í–ò–ù–£–¢–´–ô AI (–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ + –∞–Ω—Å–∞–º–±–ª–∏)
4Ô∏è   REST API (—Ä–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
5Ô∏è   –î–ê–®–ë–û–†–î–´ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
6Ô∏è   –¢–ï–°–¢ API (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
7Ô∏è   –û–¢–ö–†–´–¢–¨ –û–¢–ß–ï–¢–´ (–ø–∞–ø–∫–∞ Reports)

0Ô∏è   –í–´–•–û–î

==================================================
        """)
    
    def wait_for_enter(self):
        """–ñ–¥–µ—Ç –Ω–∞–∂–∞—Ç–∏—è Enter"""
        input("\n –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    
    def run_script(self, script_name, args=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ src"""
        try:
            script_path = Path("src") / script_name
            if not script_path.exists():
                print(f" –§–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            print(f" –ó–∞–ø—É—Å–∫–∞–µ–º {script_name}...")
            cmd = [sys.executable, str(script_path)]
            if args:
                cmd.extend(args)
                
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=Path.cwd())
            if result.returncode == 0:
                print(f" {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print(result.stdout)
            else:
                print(f" –û—à–∏–±–∫–∞ –≤ {script_name}:")
                if result.stderr:
                    print(result.stderr)
            return True
        except Exception as e:
            print(f" –ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å {script_name}: {e}")
            return False
    
    def run_full_pipeline(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–ù–ê–õ–ò–ó–ê...")
        
        steps = [
            ("dummy_data_gen.py", "–°–û–ó–î–ê–ï–ú –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï"),
            ("prepare_dataset.py", "–ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï"), 
            ("fraud_module.py", "–ó–ê–ü–£–°–ö–ê–ï–ú –ë–ê–ó–û–í–´–ô AI"),
            ("analize_data.py", "–ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–ß–ï–¢–´")
        ]
        
        for script, description in steps:
            print(f"\n {description}...")
            if not self.run_script(script):
                print(f" –ü—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞ {script}")
                return
        
        print("\n –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù!")
        print(" –í—Å–µ –æ—Ç—á–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ Reports/")
    
    def quick_analysis(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
        print("\n –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –°–ò–¢–£–ê–¶–ò–ò...")
        
        try:
            data_path = get_data_path('prepared_data')
            if not data_path.exists():
                print(" –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print(" –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª'")
                return
            
            data = pd.read_csv(data_path)
            total = len(data)
            
            if 'is_fraud' in data.columns:
                fraud = data['is_fraud'].sum()
                fraud_percent = (fraud / total * 100) if total > 0 else 0
                fraud_amount = data[data['is_fraud'] == 1]['amount'].sum()
            else:
                fraud = 0
                fraud_percent = 0
                fraud_amount = 0
            
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total:,} —à—Ç.")
            print(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {fraud:,} —à—Ç.")
            print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {fraud_percent:.1f}%")
            print(f"   ‚Ä¢ –°—É–º–º–∞ —Ä–∏—Å–∫–∞: {fraud_amount:,.0f} UZS")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {data['amount'].mean():,.0f} UZS")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞
            if fraud_percent > 5:
                risk = " –í–´–°–û–ö–ò–ô"
            elif fraud_percent > 2:
                risk = " –°–†–ï–î–ù–ò–ô" 
            else:
                risk = " –ù–ò–ó–ö–ò–ô"
                
            print(f"   ‚Ä¢ –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê: {risk}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    def run_advanced_ai(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ AI"""
        print("\n –ó–ê–ü–£–°–ö –ü–†–û–î–í–ò–ù–£–¢–û–ì–û AI –° –ù–ï–ô–†–û–°–ï–¢–Ø–ú–ò...")
        self.run_script("advanced_ai.py")
    
    def run_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        print("\n –ó–ê–ü–£–°–ö REST API –°–ï–†–í–ï–†–ê...")
        print("   –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∞ http://localhost:8000")
        print("    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("    –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print("\n   –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        self.wait_for_enter()
        self.run_script("fraud_api.py")
    
    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–æ–≤"""
        print("\n –ó–ê–ü–£–°–ö –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò...")
        self.run_script("dashboard.py")
    
    def test_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"""
        print("\n –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REST API...")
        self.run_script("test_api.py")
    
    def open_reports(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
        reports_dir = PATHS['reports']
        print(f"\n –û–¢–ö–†–´–í–ê–ï–ú –ü–ê–ü–ö–£ –° –û–¢–ß–ï–¢–ê–ú–ò...")
        print(f"   –ü—É—Ç—å: {reports_dir}")
        
        try:
            if os.name == 'nt':  # Windows
                os.startfile(reports_dir)
            elif os.name == 'posix':  # macOS, Linux
                subprocess.run(['open', reports_dir] if sys.platform == 'darwin' else ['xdg-open', reports_dir])
            print(" –ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!")
        except Exception as e:
            print(f" –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
            print(f" –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {reports_dir}")
    
    def handle_choice(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == "1":
            self.run_full_pipeline()
        elif choice == "2":
            self.quick_analysis()
        elif choice == "3":
            self.run_advanced_ai()
        elif choice == "4":
            self.run_api_server()
        elif choice == "5":
            self.run_dashboard()
        elif choice == "6":
            self.test_api()
        elif choice == "7":
            self.open_reports()
        elif choice == "0":
            print("\n –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return False
        else:
            print(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 7")
        
        return True
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        time.sleep(1)
        
        running = True
        while running:
            self.show_menu()
            
            try:
                choice = input(" –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (0-7): ").strip()
                running = self.handle_choice(choice)
                
                if running:
                    self.wait_for_enter()
                    
            except KeyboardInterrupt:
                print("\n\n –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"\n –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                self.wait_for_enter()

if __name__ == "__main__":
    system = BankAISystem()
    system.run()