# prepare_dataset.py
"""
üõ†Ô∏è –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø AI –°–ò–°–¢–ï–ú–´
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
"""

import pandas as pd
import numpy as np
from pathlib import Path

print(" –ü–û–î–ì–û–¢–ê–í–õ–ò–í–ê–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ì–û AI...")

def prepare_dataset():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not Path("dummy_transactions.csv").exists():
        print(" –§–∞–π–ª dummy_transactions.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(" –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python dummy_data_gen.py")
        return False
    
    try:
        transactions = pd.read_csv("dummy_transactions.csv")
        print(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(transactions):,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        if 'user_id' not in transactions.columns:
            print("  –ö–æ–ª–æ–Ω–∫–∞ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...")
            transactions['user_id'] = [f'user_{i%100+1:03d}' for i in range(len(transactions))]
        
        if 'timestamp' in transactions.columns:
            transactions["timestamp"] = pd.to_datetime(transactions["timestamp"])
            transactions = transactions.sort_values(["user_id", "timestamp"]).reset_index(drop=True)
        else:
            print("  –ö–æ–ª–æ–Ω–∫–∞ timestamp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã...")
            transactions["timestamp"] = pd.date_range(start='2024-01-01', periods=len(transactions), freq='H')
        
        print(" –°–û–ó–î–ê–ï–ú –ü–†–ò–ó–ù–ê–ö–ò –î–õ–Ø AI...")
        
        print("1. –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        user_stats = transactions.groupby('user_id').agg({
            'amount': ['mean', 'std', 'min', 'max', 'count']
        }).round(2)
        user_stats.columns = ['user_mean', 'user_std', 'user_min', 'user_max', 'user_count']
        transactions = transactions.merge(user_stats, on='user_id', how='left')
        
        print("2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏...")
        transactions["hour"] = transactions["timestamp"].dt.hour
        transactions["day_of_week"] = transactions["timestamp"].dt.dayofweek
        transactions["is_weekend"] = transactions["day_of_week"].isin([5, 6]).astype(int)
        transactions["month"] = transactions["timestamp"].dt.month
        
        print("3. –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        
        transactions["total_1h"] = (
            transactions.groupby("user_id", group_keys=False)
            .apply(lambda g: g.rolling("1h", on="timestamp")["amount"].sum())
        ).fillna(0)
        
        transactions["count_1h"] = (
            transactions.groupby("user_id", group_keys=False)
            .apply(lambda g: g.rolling("1h", on="timestamp")["amount"].count())
        ).fillna(0)
        
        for lag in range(1, 4):
            transactions[f"prev_amount_{lag}"] = (
                transactions.groupby("user_id")["amount"].shift(lag).fillna(0)
            )
        
        transactions["amount_ratio"] = (
            transactions["amount"] / transactions.groupby("user_id")["amount"].shift(1)
        ).replace([np.inf, -np.inf], 1).fillna(1)
        
        transactions["time_diff_sec"] = (
            transactions.groupby("user_id")["timestamp"].diff().dt.total_seconds().fillna(0)
        )
        
        print("4. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏...")
        transactions["amount_zscore"] = np.abs(
            (transactions["amount"] - transactions["amount"].mean()) / transactions["amount"].std()
        ).fillna(0)
        
        transactions["user_amount_zscore"] = transactions.groupby("user_id")["amount"].transform(
            lambda x: np.abs((x - x.mean()) / x.std()) if x.std() > 0 else 0
        ).fillna(0)
        
        print("5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
        
        transactions["is_fraud"] = (
            (transactions["amount"] > 10_000_000) |                           # –û—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã
            (transactions["amount"] < 1000) |                                # –û—á–µ–Ω—å –º–µ–ª–∫–∏–µ —Å—É–º–º—ã
            (transactions["count_1h"] > 8) |                                 # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —á–∞—Å
            (transactions["total_1h"] > 15_000_000) |                        # –ë–æ–ª—å—à–∏–µ —Å—É–º–º—ã –∑–∞ —á–∞—Å
            (transactions["time_diff_sec"] < 60) |                           # –û–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ –º–∏–Ω—É—Ç—É
            (transactions["amount_zscore"] > 3)                              # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
        ).astype(int)
        
        output_path = "prepared_transactions.csv"
        transactions.to_csv(output_path, index=False)
        
        fraud_count = transactions["is_fraud"].sum()
        fraud_percent = (fraud_count / len(transactions)) * 100
        
        print(f"\n‚úÖ –î–ê–ù–ù–´–ï –ü–û–î–ì–û–¢–û–í–õ–ï–ù–´!")
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions):,} —à—Ç.")
        print(f"   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {fraud_count:,} —à—Ç.") 
        print(f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {fraud_percent:.1f}%")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(transactions.columns)}")
        
        print(f"\nüìã –°–û–ó–î–ê–ù–ù–´–ï –ö–û–õ–û–ù–ö–ò:")
        for i, col in enumerate(transactions.columns, 1):
            print(f"   {i:2d}. {col}")
        
        print(f"\nüíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    success = prepare_dataset()
    
    if success:
        print("\nüéØ –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø –ó–ê–ü–£–°–¢–ò–¢–ï:")
        print("   python src/advanced_ai.py")
    else:
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ dummy_transactions.csv")