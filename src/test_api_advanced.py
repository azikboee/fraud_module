import requests
import json
import time
from datetime import datetime
import pandas as pd

class APITester:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.results = []
    
    def test_health(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health endpoint"""
        print("1.  –¢–ï–°–¢–ò–†–£–ï–ú HEALTH CHECK...")
        try:
            response = requests.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print(f"    Status: {data['status']}")
                print(f"    Model loaded: {data['model_loaded']}")
                print(f"    Total checks: {data['total_checks']}")
                if data['models_available']:
                    print(f"    Models: {', '.join(data['models_available'])}")
                return True
            else:
                print(f"    Health check failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"    API not available: {e}")
            return False
    
    def test_single_transactions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        print("\n2.  –¢–ï–°–¢–ò–†–£–ï–ú –û–î–ò–ù–û–ß–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò...")
        
        test_cases = [
            {
                "user_id": "user_001", 
                "amount": 50000, 
                "merchant": "Korzinka",
                "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"
            },
            {
                "user_id": "user_002", 
                "amount": 15000000, 
                "merchant": "AutoShop",
                "description": "–û—á–µ–Ω—å –∫—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"
            },
            {
                "user_id": "user_003", 
                "amount": 500, 
                "merchant": "Online",
                "description": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–µ–ª–∫–∞—è —Å—É–º–º–∞"
            },
            {
                "user_id": "vip_client", 
                "amount": 500000, 
                "merchant": "Restaurant",
                "description": "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞, VIP –∫–ª–∏–µ–Ω—Ç"
            },
            {
                "user_id": "nocturnal_user", 
                "amount": 2000000, 
                "merchant": "NightClub",
                "timestamp": "2024-01-01T03:00:00",
                "description": "–ù–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
            }
        ]
        
        for i, tx in enumerate(test_cases, 1):
            print(f"\n    –¢–µ—Å—Ç {i}: {tx['description']}")
            print(f"       {tx['user_id']} |  {tx['amount']:,.0f} UZS")
            
            response = requests.post(f"{self.base_url}/check", json=tx)
            
            if response.status_code == 200:
                result = response.json()
                self.results.append(result)
                
                status_icon = "üî¥" if result['is_suspicious'] else "üü¢"
                print(f"      {status_icon} –†–∏—Å–∫: {result['risk_level']} ({result['risk_score']:.3f})")
                print(f"       –ú–æ–¥–µ–ª—å: {result['model_used']}")
                
                if result['reasons']:
                    print(f"       –ü—Ä–∏—á–∏–Ω—ã: {', '.join(result['reasons'])}")
            else:
                print(f"       –û—à–∏–±–∫–∞: {response.status_code}")
    
    def test_batch_processing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        print("\n3.  –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–ö–ï–¢–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£...")
        
        batch_data = [
            {"user_id": "user_101", "amount": 100000, "merchant": "Shop1"},
            {"user_id": "user_102", "amount": 25000000, "merchant": "Luxury"},
            {"user_id": "user_103", "amount": 1500000, "merchant": "Electronics"},
            {"user_id": "user_104", "amount": 800, "merchant": "Online"},
            {"user_id": "user_105", "amount": 5000000, "merchant": "Travel"}
        ]
        
        response = requests.post(f"{self.base_url}/batch-check", json=batch_data)
        
        if response.status_code == 200:
            batch_result = response.json()
            print(f"    –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {batch_result['checked_count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            print(f"    –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {batch_result['suspicious_count']}")
            
            suspicious_tx = [tx for tx in batch_result['results'] if tx['is_suspicious']]
            print(f"    –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(len(suspicious_tx)/len(batch_result['results'])*100):.1f}%")
            
            self.results.extend(batch_result['results'])
        else:
            print(f"    –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code}")
    
    def test_model_reload(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏"""
        print("\n4.  –¢–ï–°–¢–ò–†–£–ï–ú –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–£ –ú–û–î–ï–õ–ò...")
        
        response = requests.post(f"{self.base_url}/reload-model")
        
        if response.status_code == 200:
            result = response.json()
            print(f"    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {result['message']}")
            print(f"    –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {result['model_loaded']}")
        else:
            print(f"    –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
        print("\n5.  –ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–ß–ï–¢...")
        
        if not self.results:
            print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        df = pd.DataFrame(self.results)
        
        total_tx = len(df)
        suspicious_tx = df['is_suspicious'].sum()
        avg_risk_score = df['risk_score'].mean()
        
        risk_distribution = df['risk_level'].value_counts()
        
        print(f"\n –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_tx} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print(f"   ‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {suspicious_tx} ({suspicious_tx/total_tx*100:.1f}%)")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {avg_risk_score:.3f}")
        print(f"   ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤:")
        for level, count in risk_distribution.items():
            print(f"     - {level}: {count} tx")
        
        report_filename = f"API_Test_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        df.to_csv(report_filename, index=False)
        print(f"    –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
        
        return df
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(" –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API")
        print("=" * 50)
        
        if not self.test_health():
            print(" API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
            return
        
        self.test_single_transactions()
        self.test_batch_processing()
        self.test_model_reload()
        
        self.generate_report()
        
        print("\n –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f" –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {self.base_url}/docs")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APITester()
    tester.run_full_test()

if __name__ == "__main__":
    main()